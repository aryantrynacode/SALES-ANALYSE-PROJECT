# -*- coding: utf-8 -*-
"""imageprocessingproject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-fY0UqpUZtxdL9WHSRXqWEoP4vvFvcyI
"""

import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from scipy.ndimage import convolve

# Load the image properly
image_path = '/content/zoro-one-piece-episode-377.jpg'
image = Image.open(image_path)
image_array = np.array(image)

# 1. Display original image
plt.imshow(image_array)
plt.title('Original Image')
plt.axis('off')
plt.show()

# 2. Convert to grayscale
gray_image_array = np.mean(image_array, axis=2)  # Simple averaging method
plt.imshow(gray_image_array, cmap='gray')
plt.title('Grayscale Image')
plt.axis('off')
plt.show()

# 3. Apply Sobel edge detection filter
sobel_x = np.array([[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]])
sobel_y = np.array([[-1, -2, -1], [0, 0, 0], [1, 2, 1]])

edge_x = convolve(gray_image_array, sobel_x)
edge_y = convolve(gray_image_array, sobel_y)
edges = np.hypot(edge_x, edge_y)  # Combine both gradient directions

plt.imshow(edges, cmap='gray')
plt.title('Edge Detection')
plt.axis('off')
plt.show()

plt.imshow(edges, cmap='gnuplot')
plt.title('Neon Edge Detection')
plt.axis('off')
plt.show()

plt.imshow(edges, cmap='gnuplot2')
plt.title('Neon Edge Detection')
plt.axis('off')
plt.show()

